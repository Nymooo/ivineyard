// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Model.Configurations;

#nullable disable

namespace Model.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Model.Configurations.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("BookingObjectId")
                        .HasColumnType("int")
                        .HasColumnName("BOOKING_OBJECT_ID");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("COMPANY_ID");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("Salary")
                        .HasColumnType("double")
                        .HasColumnName("SALARY");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("BookingObjectId")
                        .IsUnique();

                    b.HasIndex("CompanyId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Model.Entities.Bookingobjects.BookingObject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BOOKING_OBJECT_ID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("BOOKING_OBJECTS_BT");
                });

            modelBuilder.Entity("Model.Entities.Bookingobjects.Equipment", b =>
                {
                    b.Property<int>("BookingObjectId")
                        .HasColumnType("int")
                        .HasColumnName("BOOKING_OBJECT_ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("NAME");

                    b.HasKey("BookingObjectId");

                    b.ToTable("EQUIPMENTS");
                });

            modelBuilder.Entity("Model.Entities.Bookingobjects.Machine.Machine", b =>
                {
                    b.Property<int>("BookingObjectId")
                        .HasColumnType("int")
                        .HasColumnName("BOOKING_OBJECT_ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("NAME");

                    b.HasKey("BookingObjectId");

                    b.ToTable("MACHINES");
                });

            modelBuilder.Entity("Model.Entities.Bookingobjects.Machine.MachineHasStatus", b =>
                {
                    b.Property<int>("MachineId")
                        .HasColumnType("int")
                        .HasColumnName("MACHINE_ID");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("STATUS_ID");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("START_DATE");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("END_DATE");

                    b.HasKey("MachineId", "StatusId", "StartDate");

                    b.HasIndex("StatusId");

                    b.ToTable("MACHINE_HAS_STATUS");
                });

            modelBuilder.Entity("Model.Entities.Bookingobjects.Machine.MachineStatusType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("STATUS_ID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("TYPE");

                    b.HasKey("Id");

                    b.ToTable("E_MACHINE_STATUS_TYPES");
                });

            modelBuilder.Entity("Model.Entities.Bookingobjects.Vineyard.Vineyard", b =>
                {
                    b.Property<int>("BookingObjectId")
                        .HasColumnType("int")
                        .HasColumnName("BOOKING_OBJECT_ID");

                    b.Property<float>("Area")
                        .HasColumnType("float")
                        .HasColumnName("AREA");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("COMPANY_ID");

                    b.Property<string>("Coordinates")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("COORDINATES");

                    b.Property<string>("MidCoordinate")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("MID_COORDINATE");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("NAME");

                    b.HasKey("BookingObjectId");

                    b.HasIndex("CompanyId");

                    b.ToTable("VINEYARDS");
                });

            modelBuilder.Entity("Model.Entities.Bookingobjects.Vineyard.VineyardHasStatus", b =>
                {
                    b.Property<int>("VineyardId")
                        .HasColumnType("int")
                        .HasColumnName("BOOKING_OBJECT_ID");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("STATUS_ID");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("START_DATE");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("END_DATE");

                    b.HasKey("VineyardId", "StatusId", "StartDate");

                    b.HasIndex("StatusId");

                    b.ToTable("VINEYARD_HAS_STATUS_JT");
                });

            modelBuilder.Entity("Model.Entities.Bookingobjects.Vineyard.VineyardStatusType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("STATUS_ID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("TYPE");

                    b.HasKey("Id");

                    b.ToTable("E_VINEYARD_STATUS_TYPE");
                });

            modelBuilder.Entity("Model.Entities.Bookingobjects.Vineyard.WorkInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WORK_INFORMATION_ID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("VineyardId")
                        .HasColumnType("int")
                        .HasColumnName("BOOKING_OBJECT_ID");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("USER_ID");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("STARTED_AT");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("FinishedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("FINISHED_AT");

                    b.Property<int?>("MachineId")
                        .HasColumnType("int")
                        .HasColumnName("MACHINE_ID");

                    b.HasKey("Id", "VineyardId", "UserId", "StartedAt");

                    b.HasIndex("MachineId");

                    b.HasIndex("UserId");

                    b.HasIndex("VineyardId");

                    b.ToTable("VINEYARD_WORK_INFORMATION_JT");
                });

            modelBuilder.Entity("Model.Entities.Company.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("COMPANY_ID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("NAME");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("COMPANIES");
                });

            modelBuilder.Entity("Model.Entities.Company.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("INVOICE_ID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BookingObjectId")
                        .HasColumnType("int")
                        .HasColumnName("BOOKING_OBJECT_ID");

                    b.Property<DateTime?>("BoughAt")
                        .IsRequired()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("BOUGHT_AT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("DESCRIPTION");

                    b.Property<double>("Price")
                        .HasColumnType("double")
                        .HasColumnName("PRICE");

                    b.HasKey("Id");

                    b.HasIndex("BookingObjectId");

                    b.ToTable("INVOICES");
                });

            modelBuilder.Entity("Model.Entities.Harvest.Batch", b =>
                {
                    b.Property<int>("BatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BATCH_ID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("BatchId"));

                    b.Property<double>("Amount")
                        .HasColumnType("double")
                        .HasColumnName("AMOUNT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DATE");

                    b.Property<string>("Maturity_Health")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("MARURITY_HEALTH");

                    b.Property<string>("Variety")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("VARIETY");

                    b.Property<string>("Weather")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("WEATHER");

                    b.HasKey("BatchId");

                    b.ToTable("WINE_BATCH");
                });

            modelBuilder.Entity("Model.Entities.Harvest.Informations", b =>
                {
                    b.Property<int>("InformationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("INFORMATION_ID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("InformationId"));

                    b.Property<double>("Acidity")
                        .HasColumnType("double")
                        .HasColumnName("ACIDITY");

                    b.Property<int>("BatchId")
                        .HasColumnType("int")
                        .HasColumnName("BATCH_ID");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DATE");

                    b.Property<string>("FurtherSteps")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("FURTHER_STEPS");

                    b.Property<double>("PhValue")
                        .HasColumnType("double")
                        .HasColumnName("PH_VALUE");

                    b.HasKey("InformationId");

                    b.HasIndex("BatchId");

                    b.ToTable("INFORMATIONS");
                });

            modelBuilder.Entity("Model.Entities.Harvest.StartingMust", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("INFORMATION_ID");

                    b.Property<double>("KMW_OE")
                        .HasColumnType("double")
                        .HasColumnName("KMW/OE");

                    b.Property<string>("MashLife")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("MASH_LIFE");

                    b.Property<string>("Rebel")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("REBEL");

                    b.Property<string>("Squeeze")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("SQUEEZE");

                    b.HasKey("Id");

                    b.ToTable("STARTING_MUST");
                });

            modelBuilder.Entity("Model.Entities.Harvest.Tank", b =>
                {
                    b.Property<int>("TankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TANK_ID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TankId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("TANK_NAME");

                    b.HasKey("TankId");

                    b.ToTable("TANK");
                });

            modelBuilder.Entity("Model.Entities.Harvest.TankHasWineBatch", b =>
                {
                    b.Property<int>("BatchId")
                        .HasColumnType("int")
                        .HasColumnName("BATCH_ID");

                    b.Property<int>("TankId")
                        .HasColumnType("int")
                        .HasColumnName("TANK_ID");

                    b.HasKey("BatchId", "TankId");

                    b.HasIndex("TankId");

                    b.ToTable("TANK_has_WINE_BATCH");
                });

            modelBuilder.Entity("Model.Entities.Harvest.TankMovement", b =>
                {
                    b.Property<int>("MovementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MOVEMENT_ID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("MovementId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DATE");

                    b.Property<int>("FromTakId")
                        .HasColumnType("int")
                        .HasColumnName("FROM_TANK");

                    b.Property<int>("ToTankId")
                        .HasColumnType("int")
                        .HasColumnName("TO_TANK");

                    b.Property<double>("Volume")
                        .HasColumnType("double")
                        .HasColumnName("VOLUME");

                    b.HasKey("MovementId");

                    b.HasIndex("FromTakId");

                    b.HasIndex("ToTankId");

                    b.ToTable("TANK_MOVEMENT");
                });

            modelBuilder.Entity("Model.Entities.Harvest.Treatment", b =>
                {
                    b.Property<int>("TreatmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TREATMENT_ID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TreatmentId"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("TYPE");

                    b.HasKey("TreatmentId");

                    b.ToTable("TREATMENT");
                });

            modelBuilder.Entity("Model.Entities.Harvest.VineyardHasBatch", b =>
                {
                    b.Property<int>("BatchId")
                        .HasColumnType("int")
                        .HasColumnName("BATCH_ID");

                    b.Property<int>("VineyardId")
                        .HasColumnType("int")
                        .HasColumnName("VINEYARD_ID");

                    b.HasKey("BatchId", "VineyardId");

                    b.HasIndex("VineyardId");

                    b.ToTable("VINEYARD_HAS_BATCH");
                });

            modelBuilder.Entity("Model.Entities.Harvest.WhiteWine_RedWine", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("INFORMATION_ID");

                    b.Property<double>("Alcohol")
                        .HasColumnType("double")
                        .HasColumnName("ALCOHOL");

                    b.Property<double>("ResidualSugar")
                        .HasColumnType("double")
                        .HasColumnName("RESIDUAL_SUGAR");

                    b.Property<double>("Sulfur")
                        .HasColumnType("double")
                        .HasColumnName("SULFUR");

                    b.HasKey("Id");

                    b.ToTable("WHITE_WINE_RED_WINE");
                });

            modelBuilder.Entity("Model.Entities.Harvest.WineBatchHasTreatment", b =>
                {
                    b.Property<int>("BatchId")
                        .HasColumnType("int")
                        .HasColumnName("BATCH_ID");

                    b.Property<int>("TreatementId")
                        .HasColumnType("int")
                        .HasColumnName("TREATMENT_ID");

                    b.Property<string>("Agent")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("AGENT");

                    b.Property<double>("Amount")
                        .HasColumnType("double")
                        .HasColumnName("AMOUNT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DATE");

                    b.HasKey("BatchId", "TreatementId");

                    b.HasIndex("TreatementId");

                    b.ToTable("WINE_BATCH_has_TREATMENT");
                });

            modelBuilder.Entity("Model.Entities.Harvest.YoungWine", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("INFORMATION_ID");

                    b.Property<double>("Alcohol")
                        .HasColumnType("double")
                        .HasColumnName("ALCOHOL");

                    b.Property<double>("ResidualSugar")
                        .HasColumnType("double")
                        .HasColumnName("RESIDUAL_SUGAR");

                    b.HasKey("Id");

                    b.ToTable("YOUNG_WINE");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Model.Configurations.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Model.Configurations.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Configurations.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Model.Configurations.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Configurations.ApplicationUser", b =>
                {
                    b.HasOne("Model.Entities.Bookingobjects.BookingObject", "BookingObject")
                        .WithOne("ApplicationUser")
                        .HasForeignKey("Model.Configurations.ApplicationUser", "BookingObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Company.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("BookingObject");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Model.Entities.Bookingobjects.Equipment", b =>
                {
                    b.HasOne("Model.Entities.Bookingobjects.BookingObject", "BookingObject")
                        .WithOne("Equipment")
                        .HasForeignKey("Model.Entities.Bookingobjects.Equipment", "BookingObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookingObject");
                });

            modelBuilder.Entity("Model.Entities.Bookingobjects.Machine.Machine", b =>
                {
                    b.HasOne("Model.Entities.Bookingobjects.BookingObject", "BookingObject")
                        .WithOne("Machine")
                        .HasForeignKey("Model.Entities.Bookingobjects.Machine.Machine", "BookingObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookingObject");
                });

            modelBuilder.Entity("Model.Entities.Bookingobjects.Machine.MachineHasStatus", b =>
                {
                    b.HasOne("Model.Entities.Bookingobjects.Machine.Machine", "Machine")
                        .WithMany("MachineHasStatusList")
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Bookingobjects.Machine.MachineStatusType", "MachineStatusType")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Machine");

                    b.Navigation("MachineStatusType");
                });

            modelBuilder.Entity("Model.Entities.Bookingobjects.Vineyard.Vineyard", b =>
                {
                    b.HasOne("Model.Entities.Bookingobjects.BookingObject", "BookingObject")
                        .WithOne("Vineyard")
                        .HasForeignKey("Model.Entities.Bookingobjects.Vineyard.Vineyard", "BookingObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Company.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("BookingObject");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Model.Entities.Bookingobjects.Vineyard.VineyardHasStatus", b =>
                {
                    b.HasOne("Model.Entities.Bookingobjects.Vineyard.VineyardStatusType", "VineyardStatusType")
                        .WithMany("StatusList")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Bookingobjects.Vineyard.Vineyard", "Vineyard")
                        .WithMany("StatusList")
                        .HasForeignKey("VineyardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vineyard");

                    b.Navigation("VineyardStatusType");
                });

            modelBuilder.Entity("Model.Entities.Bookingobjects.Vineyard.WorkInformation", b =>
                {
                    b.HasOne("Model.Entities.Bookingobjects.Machine.Machine", "Machine")
                        .WithMany("WorkInformation")
                        .HasForeignKey("MachineId");

                    b.HasOne("Model.Configurations.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Bookingobjects.Vineyard.Vineyard", "Vineyard")
                        .WithMany()
                        .HasForeignKey("VineyardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Machine");

                    b.Navigation("Vineyard");
                });

            modelBuilder.Entity("Model.Entities.Company.Invoice", b =>
                {
                    b.HasOne("Model.Entities.Bookingobjects.BookingObject", "BookingObject")
                        .WithMany("Invoice")
                        .HasForeignKey("BookingObjectId");

                    b.Navigation("BookingObject");
                });

            modelBuilder.Entity("Model.Entities.Harvest.Informations", b =>
                {
                    b.HasOne("Model.Entities.Harvest.Batch", "Batch")
                        .WithMany("InformationsList")
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Batch");
                });

            modelBuilder.Entity("Model.Entities.Harvest.StartingMust", b =>
                {
                    b.HasOne("Model.Entities.Harvest.Informations", "Informations")
                        .WithOne("StartingMust")
                        .HasForeignKey("Model.Entities.Harvest.StartingMust", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Informations");
                });

            modelBuilder.Entity("Model.Entities.Harvest.TankHasWineBatch", b =>
                {
                    b.HasOne("Model.Entities.Harvest.Batch", "Batch")
                        .WithMany()
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Harvest.Tank", "Tank")
                        .WithMany()
                        .HasForeignKey("TankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Batch");

                    b.Navigation("Tank");
                });

            modelBuilder.Entity("Model.Entities.Harvest.TankMovement", b =>
                {
                    b.HasOne("Model.Entities.Harvest.Tank", "FromTank")
                        .WithMany()
                        .HasForeignKey("FromTakId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Harvest.Tank", "ToTank")
                        .WithMany()
                        .HasForeignKey("ToTankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FromTank");

                    b.Navigation("ToTank");
                });

            modelBuilder.Entity("Model.Entities.Harvest.VineyardHasBatch", b =>
                {
                    b.HasOne("Model.Entities.Harvest.Batch", "Batch")
                        .WithMany()
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Bookingobjects.Vineyard.Vineyard", "Vineyard")
                        .WithMany()
                        .HasForeignKey("VineyardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Batch");

                    b.Navigation("Vineyard");
                });

            modelBuilder.Entity("Model.Entities.Harvest.WhiteWine_RedWine", b =>
                {
                    b.HasOne("Model.Entities.Harvest.Informations", "Informations")
                        .WithOne("WhiteWineRedWine")
                        .HasForeignKey("Model.Entities.Harvest.WhiteWine_RedWine", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Informations");
                });

            modelBuilder.Entity("Model.Entities.Harvest.WineBatchHasTreatment", b =>
                {
                    b.HasOne("Model.Entities.Harvest.Batch", "Batch")
                        .WithMany("batchHasTreatmentsList")
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Harvest.Treatment", "Treatment")
                        .WithMany()
                        .HasForeignKey("TreatementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Batch");

                    b.Navigation("Treatment");
                });

            modelBuilder.Entity("Model.Entities.Harvest.YoungWine", b =>
                {
                    b.HasOne("Model.Entities.Harvest.Informations", "Informations")
                        .WithOne("YoungWine")
                        .HasForeignKey("Model.Entities.Harvest.YoungWine", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Informations");
                });

            modelBuilder.Entity("Model.Entities.Bookingobjects.BookingObject", b =>
                {
                    b.Navigation("ApplicationUser");

                    b.Navigation("Equipment");

                    b.Navigation("Invoice");

                    b.Navigation("Machine");

                    b.Navigation("Vineyard");
                });

            modelBuilder.Entity("Model.Entities.Bookingobjects.Machine.Machine", b =>
                {
                    b.Navigation("MachineHasStatusList");

                    b.Navigation("WorkInformation");
                });

            modelBuilder.Entity("Model.Entities.Bookingobjects.Vineyard.Vineyard", b =>
                {
                    b.Navigation("StatusList");
                });

            modelBuilder.Entity("Model.Entities.Bookingobjects.Vineyard.VineyardStatusType", b =>
                {
                    b.Navigation("StatusList");
                });

            modelBuilder.Entity("Model.Entities.Harvest.Batch", b =>
                {
                    b.Navigation("InformationsList");

                    b.Navigation("batchHasTreatmentsList");
                });

            modelBuilder.Entity("Model.Entities.Harvest.Informations", b =>
                {
                    b.Navigation("StartingMust");

                    b.Navigation("WhiteWineRedWine");

                    b.Navigation("YoungWine");
                });
#pragma warning restore 612, 618
        }
    }
}
