@using Microsoft.AspNetCore.Authorization
@using System.Net.Http.Json
@using MudBlazor
@using Model.Entities.Harvest
@using Model.Entities.Bookingobjects.Vineyard
@using WebGUI.Client.ClientServices
@using WebGUI.Client.Pages.Components.Records
@inject HttpClient Http
@inject VineyardService VineyardService
@inject TankService TankService
@inject BatchService BatchService
@inject NavigationManager Navigation



<MudDialog Style="width:60vw; max-width:60vw;">
  <DialogContent>

    <MudContainer Class="pa-4">
      <MudText Typo="Typo.h4" Class="mb-4">Maßnahmendatenblatt</MudText>

      <EditForm Model="@Vm" OnValidSubmit="@SaveAsync">
        <MudGrid Spacing="3">

          <!-- Linke Spalte -->
          <MudItem xs="12" md="6">
            <MudPaper Class="pa-4 mb-4">

              <MudText Typo="Typo.h5" Class="mb-2">Weingarten</MudText>
              <MudGrid Class="mb-2">
                <!-- Erste Zeile: Weingarten + Menge -->
                <MudItem xs="12" md="8">
                  <MudSelect T="int" @bind-Value="Vm.VineyardId" Label="Weingarten" Dense="true" Required="true">
                    @foreach (var v in Vineyards)
                    {
                      <MudSelectItem Value="@v.BookingObjectId">@v.Name</MudSelectItem>
                    }
                  </MudSelect>
                </MudItem>
                <MudItem xs="12" md="4">
                  <MudNumericField T="string" @bind-Value="Vm.Amount" Label="Menge (kg)" Dense="true" Required="true"/>
                </MudItem>

                <!-- Zweite Zeile: Sorte + Datum -->
                <MudItem xs="12" md="6">
                  <MudTextField T="string" @bind-Value="Vm.Variety" Label="Sorte" Dense="true" Required="true"/>
                </MudItem>
                <MudItem xs="12" md="6">
                  <MudDatePicker T="DateTime?" @bind-Date="Vm.HarvestDate" Label="Erntedatum" Dense="true"/>
                </MudItem>
              </MudGrid>

              <MudText Typo="Typo.h6" Class="mt-3 mb-1">Behandlungen (Trauben)</MudText>

              @foreach (var grp in Vm.GrapeTreatments)
              {
                <MudText Typo="Typo.body1" Class="mb-1">@grp.Type</MudText>

                @for (int i = 0; i < grp.Lines.Count; i++)
                {
                  var idx  = i;                 // stabiler Index für das Click-Closure
                  var line = grp.Lines[idx];    // lokale Referenz – kein mehrfacher Indexzugriff

                  <MudGrid Class="mb-2" @key="line">
                    <MudItem xs="4">
                      <MudDatePicker T="DateTime?" @bind-Date="line.Date" Label="Datum" Dense="true" />
                    </MudItem>
                    <MudItem xs="4">
                      <MudTextField @bind-Value="line.Agent" Label="Mittel" Dense="true" />
                    </MudItem>
                    <MudItem xs="3">
                      <MudTextField T="string" @bind-Value="line.Amount" Label="Menge" Dense="true" />
                    </MudItem>
                    <MudItem xs="1" Class="d-flex align-center justify-end">
                      <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                     Color="Color.Error"
                                     Disabled="@(grp.Lines.Count == 1)"
                                     OnClick="@(() => RemoveTreatmentRow(grp, idx))" />
                    </MudItem>
                  </MudGrid>
                }


                <MudButton Variant="Variant.Outlined" Size="Size.Small"
                           StartIcon="@Icons.Material.Filled.Add"
                           OnClick="@(() => AddTreatmentRow(grp))">
                  Zeile hinzufügen
                </MudButton>

                <MudDivider Class="my-2" />
              }

              <MudItem xs="12">
                <MudTextField @bind-Value="Vm.GrapeNotes" Label="weitere Behandlungsschritte" Dense="true" />
              </MudItem>


              <MudText Typo="Typo.h6" Class="mt-3 mb-1">Most / Maische</MudText>

              @foreach (var grp in Vm.MashTreatments)
              {
                <MudText Typo="Typo.body1" Class="mb-1">@grp.Type</MudText>

                @for (int i = 0; i < grp.Lines.Count; i++)
                {
                  var idx  = i;                 // stabiler Index für das Click-Closure
                  var line = grp.Lines[idx];    // lokale Referenz – kein mehrfacher Indexzugriff

                  <MudGrid Class="mb-2" @key="line">
                    <MudItem xs="4">
                      <MudDatePicker T="DateTime?" @bind-Date="line.Date" Label="Datum" Dense="true" />
                    </MudItem>
                    <MudItem xs="4">
                      <MudTextField @bind-Value="line.Agent" Label="Mittel" Dense="true" />
                    </MudItem>
                    <MudItem xs="3">
                      <MudTextField T="string" @bind-Value="line.Amount" Label="Menge" Dense="true" />
                    </MudItem>
                    <MudItem xs="1" Class="d-flex align-center justify-end">
                      <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                     Color="Color.Error"
                                     Disabled="@(grp.Lines.Count == 1)"
                                     OnClick="@(() => RemoveTreatmentRow(grp, idx))" />
                    </MudItem>
                  </MudGrid>
                }


                <MudButton Variant="Variant.Outlined" Size="Size.Small"
                           StartIcon="@Icons.Material.Filled.Add"
                           OnClick="@(() => AddTreatmentRow(grp))">
                  Zeile hinzufügen
                </MudButton>

                <MudDivider Class="my-2" />
              }

              <MudItem xs="12">
                <MudTextField @bind-Value="Vm.MashNotes" Label="weitere Behandlungsschritte" Dense="true" />
              </MudItem>


              <MudText Typo="Typo.h6" Class="mt-3 mb-1">Jungwein-Behandlungen</MudText>

              @foreach (var grp in Vm.YoungTreatments)
              {
                <MudText Typo="Typo.body1" Class="mb-1">@grp.Type</MudText>

                @for (int i = 0; i < grp.Lines.Count; i++)
                {
                  var idx  = i;                 // stabiler Index für das Click-Closure
                  var line = grp.Lines[idx];    // lokale Referenz – kein mehrfacher Indexzugriff

                  <MudGrid Class="mb-2" @key="line">
                    <MudItem xs="4">
                      <MudDatePicker T="DateTime?" @bind-Date="line.Date" Label="Datum" Dense="true" />
                    </MudItem>
                    <MudItem xs="4">
                      <MudTextField @bind-Value="line.Agent" Label="Mittel" Dense="true" />
                    </MudItem>
                    <MudItem xs="3">
                      <MudTextField T="string" @bind-Value="line.Amount" Label="Menge" Dense="true" />
                    </MudItem>
                    <MudItem xs="1" Class="d-flex align-center justify-end">
                      <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                     Color="Color.Error"
                                     Disabled="@(grp.Lines.Count == 1)"
                                     OnClick="@(() => RemoveTreatmentRow(grp, idx))" />
                    </MudItem>
                  </MudGrid>
                }


                <MudButton Variant="Variant.Outlined" Size="Size.Small"
                           StartIcon="@Icons.Material.Filled.Add"
                           OnClick="@(() => AddTreatmentRow(grp))">
                  Zeile hinzufügen
                </MudButton>

                <MudDivider Class="my-2" />
              }

              <MudItem xs="12">
                <MudTextField @bind-Value="Vm.YoungNotesFree" Label="weitere Behandlungsschritte" Dense="true" />
              </MudItem>

            </MudPaper>
          </MudItem>

          <!-- Rechte Spalte -->
          <MudItem xs="12" md="6">
            <MudPaper Class="pa-4 mb-4">

              <MudText Typo="Typo.h5" Class="mb-2">Reife & Gesundheit / Tank / Wetter</MudText>
              <MudGrid Class="mb-2">
                <MudItem xs="12" md="5">
                  <MudTextField @bind-Value="Vm.MaturityHealth" Label="Reife/Gesundheit" Dense="true"/>
                </MudItem>
                <MudItem xs="12" md="4">
                  <MudSelect T="int?" @bind-Value="Vm.TankId" Label="Tank" Dense="true">
                    <MudSelectItem T="int?" Value="@((int?)null)">(kein Tank)</MudSelectItem>
                    @foreach (var t in Tanks)
                    {
                      <MudSelectItem T="int?" Value="@((int?)t.TankId)">Tank @t.TankId</MudSelectItem>
                    }
                  </MudSelect>
                </MudItem>
                <MudItem xs="12" md="3">
                  <MudTextField @bind-Value="Vm.Weather" Label="Wetter" Dense="true"/>
                </MudItem>
              </MudGrid>

              <MudText Typo="Typo.h6" Class="mt-3 mb-1">Daten Ausgangsmost</MudText>
              <MudGrid Class="mb-2">
                <MudItem xs="6" md="3">
                  <MudDatePicker T="DateTime?" @bind-Date="Vm.MustDate" Label="Datum" Dense="true"/>
                </MudItem>
                <MudItem xs="6" md="3">
                  <MudTextField @bind-Value="Vm.MustAcidity" Label="Säure" Dense="true"/>
                </MudItem>
                <MudItem xs="6" md="3">
                  <MudNumericField T="double?" @bind-Value="Vm.MustPh" Label="pH-Wert" Dense="true"/>
                </MudItem>
                <MudItem xs="6" md="3">
                  <MudNumericField T="double?" @bind-Value="Vm.KMW_OE" Label="KMW/°Oe" Dense="true"/>
                </MudItem>
                <MudItem xs="12">
                  <MudTextField @bind-Value="Vm.Rebel" Label="Rebeln" Dense="true"/>
                </MudItem>
                <MudItem xs="12">
                  <MudTextField @bind-Value="Vm.Squeeze" Label="Quetschen" Dense="true"/>
                </MudItem>
                <MudItem xs="12">
                  <MudTextField @bind-Value="Vm.MashLife" Label="Maischestandzeit" Dense="true"/>
                </MudItem>

                <MudItem xs="12">
                  <MudTextField @bind-Value="Vm.MustNotes" Label="weitere Behandlungsschritte" Dense="true"/>
                </MudItem>
              </MudGrid>

              <MudText Typo="Typo.h6" Class="mt-3 mb-1">Daten Jungwein</MudText>
              <MudGrid Class="mb-2">
                <MudItem xs="6" md="3">
                  <MudDatePicker T="DateTime?" @bind-Date="Vm.YoungDate" Label="Datum" Dense="true"/>
                </MudItem>
                <MudItem xs="6" md="3">
                  <MudTextField  @bind-Value="Vm.YoungAcidity" Label="Säure" Dense="true"/>
                </MudItem>
                <MudItem xs="6" md="3">
                  <MudTextField  @bind-Value="Vm.YoungSugar" Label="Restzucker" Dense="true"/>
                </MudItem>
                <MudItem xs="6" md="3">
                  <MudNumericField T="double?" @bind-Value="Vm.YoungAlcohol" Label="Alkohol" Dense="true"/>
                </MudItem>
                <MudItem xs="6" md="3">
                  <MudNumericField T="double?" @bind-Value="Vm.YoungPh" Label="pH-Wert" Dense="true"/>
                </MudItem>
                <MudItem xs="12">
                  <MudTextField @bind-Value="Vm.YoungNotes" Label="weitere Behandlungsschritte" Dense="true"/>
                </MudItem>
              </MudGrid>

              <MudText Typo="Typo.h6" Class="mt-3 mb-1">Daten Weißwein/Rotwein (Endwerte)</MudText>
              <MudGrid Class="mb-2">
                <MudItem xs="6" md="3">
                  <MudDatePicker T="DateTime?" @bind-Date="Vm.FinalDate" Label="Datum" Dense="true"/>
                </MudItem>
                <MudItem xs="6" md="3">
                  <MudTextField  @bind-Value="Vm.FinalAcidity" Label="Säure" Dense="true"/>
                </MudItem>
                <MudItem xs="6" md="3">
                  <MudTextField  @bind-Value="Vm.FinalSugar" Label="Restzucker" Dense="true"/>
                </MudItem>
                <MudItem xs="6" md="3">
                  <MudNumericField T="double?" @bind-Value="Vm.FinalAlcohol" Label="Alkohol" Dense="true"/>
                </MudItem>
                <MudItem xs="6" md="3">
                  <MudNumericField T="double?" @bind-Value="Vm.FinalPh" Label="pH-Wert" Dense="true"/>
                </MudItem>
                <MudItem xs="6" md="3">
                  <MudTextField @bind-Value="Vm.FinalSulfur" Label="Schwefel" Dense="true"/>
                </MudItem>
                <MudItem xs="12">
                  <MudTextField @bind-Value="Vm.FinalNotes" Label="weitere Behandlungsschritte" Dense="true"/>
                </MudItem>
              </MudGrid>

              <MudText Typo="Typo.h6" Class="mt-3 mb-1">Umgezogen in Tank</MudText>
              @foreach (var m in Vm.Movements)
              {
                <MudGrid Class="mb-2">
                  <MudItem xs="4">
                    <MudSelect T="int?" @bind-Value="m.ToTankId" Label="Tank" Dense="true">
                      <MudSelectItem T="int?" Value="@((int?)null)">(kein Tank)</MudSelectItem>
                      @foreach (var t in Tanks)
                      {
                        <MudSelectItem T="int?" Value="@((int?)t.TankId)">Tank @t.TankId</MudSelectItem>
                      }
                    </MudSelect>
                  </MudItem>
                  <MudItem xs="4">
                    <MudNumericField T="double?" @bind-Value="m.Volume" Label="Volumen (L)" Dense="true"/>
                  </MudItem>
                  <MudItem xs="4">
                    <MudDatePicker T="DateTime?" @bind-Date="m.Date" Label="Datum" Dense="true"/>
                  </MudItem>
                </MudGrid>
              }
            </MudPaper>
          </MudItem>

        </MudGrid>

        <MudStack Row="true" Spacing="2">
          <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">Speichern</MudButton>
          <MudButton Variant="Variant.Outlined" OnClick="@Reset">Zurücksetzen</MudButton>
        </MudStack>
      </EditForm>
    </MudContainer>
  </DialogContent>
</MudDialog>

@code {

  void AddTreatmentRow(TreatmentGroup grp)
  {
    grp.Lines.Add(new TreatmentLine());
    StateHasChanged();
  }

  void RemoveTreatmentRow(TreatmentGroup grp, int index)
  {
    if (index >= 0 && index < grp.Lines.Count && grp.Lines.Count > 1)
    {
      grp.Lines.RemoveAt(index);
      StateHasChanged();
    }
  }


  
  // Lookups
  List<VineyardRecord>? Vineyards = new();
  List<Tank>? Tanks = new();

  [Parameter] public MudDialogInstance? MudDialog { get; set; }
  [Parameter] public int Id { get; set; }


  // VM
  class TreatmentLine { public string? Agent { get; set; } public string? Amount { get; set; } public DateTime? Date { get; set; } }

  class TreatmentGroup
  {
    public string Type { get; set; } = "";
    public List<TreatmentLine> Lines { get; set; } = new();
  }
  
  class MovementLine
  {
    public int? ToTankId { get; set; }
    public double? Volume { get; set; }
    public DateTime? Date { get; set; }
  }

  class WeinFormVm
  {
    public int VineyardId { get; set; }
    public string Amount { get; set; }
    public DateTime? HarvestDate { get; set; }
    public string Variety { get; set; } = "";
    public string? MaturityHealth { get; set; }
    public string? Weather { get; set; }
    public int? TankId { get; set; }

    public List<TreatmentGroup> GrapeTreatments { get; set; } = new();
    public List<TreatmentGroup> MashTreatments  { get; set; } = new();
    public List<TreatmentGroup> YoungTreatments { get; set; } = new();
        
        
    public string? GrapeNotes { get; set; }       
    public string? MashNotes { get; set; }
    public string? YoungNotesFree { get; set; }
        
        

    public DateTime? MustDate { get; set; }
    public double? KMW_OE { get; set; }
    public string? MustAcidity { get; set; }
    public double? MustPh { get; set; }
    public string? MustNotes { get; set; }
    public string? Rebel { get; set; }
    public string? Squeeze { get; set; }
    public string? MashLife { get; set; }

    public DateTime? YoungDate { get; set; }
    public string? YoungAcidity { get; set; }
    public string? YoungSugar { get; set; }
    public double? YoungAlcohol { get; set; }
    public double? YoungPh { get; set; }
    public string? YoungNotes { get; set; }

    public DateTime? FinalDate { get; set; }
    public string? FinalAcidity { get; set; }
    public string? FinalSugar { get; set; }
    public double? FinalAlcohol { get; set; }
    public double? FinalPh { get; set; }
    public string? FinalSulfur { get; set; }
    public string? FinalNotes { get; set; }

    public List<MovementLine> Movements { get; set; } = new();
  }

  // DTOs für die API
  class BatchCreateDto
  {
    public int VineyardId { get; set; }
    public string Amount { get; set; }
    public DateTime? HarvestDate { get; set; }
    public string Variety { get; set; } = string.Empty;
    public string? MaturityHealth { get; set; }
    public string? Weather { get; set; }
    public int? TankId { get; set; }

    public List<TreatmentLineDto> GrapeTreatments { get; set; } = new();
    public List<TreatmentLineDto> MashTreatments { get; set; } = new();
    public List<TreatmentLineDto> YoungTreatments { get; set; } = new();

    public string? GrapeNotes { get; set; }
    public string? MashNotes { get; set; }
    public string? YoungNotesFree { get; set; }



    public DateTime? MustDate { get; set; }
    public double? KMW_OE { get; set; }
    public string? MustAcidity { get; set; }
    public double? MustPh { get; set; }
    public string? MustNotes { get; set; }
    public string? Rebel { get; set; }
    public string? Squeeze { get; set; }
    public string? MashLife { get; set; }

    public DateTime? YoungDate { get; set; }
    public string? YoungAcidity { get; set; }
    public string? YoungSugar { get; set; }
    public double? YoungAlcohol { get; set; }
    public double? YoungPh { get; set; }
    public string? YoungNotes { get; set; }

    public DateTime? FinalDate { get; set; }
    public string? FinalAcidity { get; set; }
    public string? FinalSugar { get; set; }
    public double? FinalAlcohol { get; set; }
    public double? FinalPh { get; set; }
    public string? FinalSulfur { get; set; }
    public string? FinalNotes { get; set; }

    public List<MovementLineDto> Movements { get; set; } = new();
  }

  class TreatmentLineDto
  {
    public string Type { get; set; } = "";
    public string? Agent { get; set; }
    public string? Amount { get; set; }
    public DateTime? Date { get; set; }
  }

  class MovementLineDto
  {
    public int? ToTankId { get; set; }
    public double? Volume { get; set; }
    public DateTime? Date { get; set; }
  }

  WeinFormVm Vm = new();

  protected override async Task OnInitializedAsync()
  {
    Vineyards = await VineyardService.GetVineyardsAsync();
    Tanks = await TankService.GetTanksAsync();

    Prefill();
  }

  void Prefill()
  {
    Vm.Variety = "";

    Vm.GrapeTreatments = new()
    {
      new() { Type = "Trauben",          Lines = { new() } },
      new() { Type = "Schwefelung",      Lines = { new() } },
      new() { Type = "Extraktionsenzym", Lines = { new() } },
      new() { Type = "Pressprogramm",    Lines = { new() } }
    };

    Vm.MashTreatments = new()
    {
      new() { Type = "Schwefelung",      Lines = { new() } },
      new() { Type = "Saftentzug",       Lines = { new() } },
      new() { Type = "Maischestandzeit", Lines = { new() } },
      new() { Type = "Ent-/Säuerung",    Lines = { new() } },
      new() { Type = "Mostbehandlung",   Lines = { new() } },
      new() { Type = "Klärenzym",        Lines = { new() } },
      new() { Type = "Maischeantannin",  Lines = { new() } },
      new() { Type = "Aufzuckerung",     Lines = { new() } },
      new() { Type = "Hefe",             Lines = { new() } },
      new() { Type = "Hefenährstoff",    Lines = { new() } },
      new() { Type = "Belüften",         Lines = { new() } },
      new() { Type = "Abgezogen",        Lines = { new() } }
    };

    Vm.YoungTreatments = new()
    {
      new() { Type = "Ent-/Säuerung",        Lines = { new() } },
      new() { Type = "Biolog. Säureabbau",   Lines = { new() } },
      new() { Type = "Schwefelung",          Lines = { new() } },
      new() { Type = "Schönung",             Lines = { new() } },
      new() { Type = "Vorfiltration",        Lines = { new() } },
      new() { Type = "Filtration",           Lines = { new() } },
      new() { Type = "Füllung",              Lines = { new() } }
    };

    if (!Vm.Movements.Any()) Vm.Movements.Add(new());
  }


  async Task SaveAsync()
  {
    var dto = new BatchCreateDto
    {
      VineyardId = Vm.VineyardId,
      Amount = Vm.Amount,
      HarvestDate = Vm.HarvestDate,
      Variety = Vm.Variety,
      MaturityHealth = Vm.MaturityHealth,
      Weather = Vm.Weather,
      TankId = Vm.TankId,

        GrapeNotes = Vm.GrapeNotes,
        MashNotes = Vm.MashNotes,
        YoungNotesFree = Vm.YoungNotesFree,

      MustDate = Vm.MustDate,
      KMW_OE = Vm.KMW_OE,
      MustAcidity = Vm.MustAcidity,
      MustPh = Vm.MustPh,
      MustNotes = Vm.MustNotes,
      Rebel = Vm.Rebel,
      Squeeze = Vm.Squeeze,
      MashLife = Vm.MashLife,

      YoungDate = Vm.YoungDate,
      YoungAcidity = Vm.YoungAcidity,
      YoungSugar = Vm.YoungSugar,
      YoungAlcohol = Vm.YoungAlcohol,
      YoungPh = Vm.YoungPh,
      YoungNotes = Vm.YoungNotes,

      FinalDate = Vm.FinalDate,
      FinalAcidity = Vm.FinalAcidity,
      FinalSugar = Vm.FinalSugar,
      FinalAlcohol = Vm.FinalAlcohol,
      FinalPh = Vm.FinalPh,
      FinalSulfur = Vm.FinalSulfur,
      FinalNotes = Vm.FinalNotes,

      GrapeTreatments = Vm.GrapeTreatments
        .SelectMany(g => g.Lines.Select(l => new TreatmentLineDto { Type = g.Type, Agent = l.Agent, Amount = l.Amount, Date = l.Date }))
        .ToList(),

      MashTreatments = Vm.MashTreatments
        .SelectMany(g => g.Lines.Select(l => new TreatmentLineDto { Type = g.Type, Agent = l.Agent, Amount = l.Amount, Date = l.Date }))
        .ToList(),

      YoungTreatments = Vm.YoungTreatments
        .SelectMany(g => g.Lines.Select(l => new TreatmentLineDto { Type = g.Type, Agent = l.Agent, Amount = l.Amount, Date = l.Date }))
        .ToList(),

      Movements = Vm.Movements.Select(m => new MovementLineDto { ToTankId = m.ToTankId, Volume = m.Volume, Date = m.Date }).ToList()
    };

    var resp = await BatchService.CreateBatchAsync(dto);
    resp.EnsureSuccessStatusCode();

    RefreshPage();
    Reset();
  }

  void Reset()
  {
    Vm = new WeinFormVm();
    Prefill();
    StateHasChanged();
  }

  private void RefreshPage()
  {
    Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
  }

}