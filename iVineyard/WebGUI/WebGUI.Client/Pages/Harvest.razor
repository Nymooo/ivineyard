@page "/weinbereitung"
@using Microsoft.AspNetCore.Authorization
@using System.Net.Http.Json
@using MudBlazor
@using Model.Entities.Harvest
@using WebGUI.Client.ClientServices
@using Microsoft.AspNetCore.Components.Sections
@using WebGUI.Client.Pages.Components.Harvest
@using WebGUI.Client.Pages.Components.Records

@inject VineyardHasBatchService VineyardHasBatchService
@inject IDialogService DialogService
@inject NavigationManager Nav

@rendermode InteractiveAuto
@attribute [Authorize(Roles = "Admin")]

<SectionContent SectionName="headbar">
    <MudText Typo="Typo.h4">Harvest</MudText>
    <MudButton OnClick="AddHarvestModal" Variant="Variant.Filled"
               StartIcon="@Icons.Material.Filled.Construction" Color="Color.Primary">
        Add Batch
    </MudButton>
</SectionContent>

<MudContainer Class="pa-4">

    <MudStack Row="true" Spacing="2" Class="mb-3">
        <MudTextField @bind-Value="search" Placeholder="Suche: Sorte, Wetter, Reife..."
                      Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" />
        <MudDatePicker @bind-Date="from" Label="von" Dense="true" />
        <MudDatePicker @bind-Date="to" Label="bis" Dense="true" />
        <MudButton Variant="Variant.Outlined" OnClick="ResetFilters">Reset</MudButton>
    </MudStack>
    <MudGrid Spacing="3">
        @if (loading)
        {
            <MudItem xs="12"><MudProgressLinear Indeterminate="true" /></MudItem>
        }
        else if (batches is null || !Filtered.Any())
        {
            <MudItem xs="12"><MudAlert Severity="Severity.Info">Keine Batches gefunden.</MudAlert></MudItem>
        }
        else
        {
            @foreach (var b in Filtered)
            {
                <MudItem xs="12" sm="6" md="4" lg="4">
                    <MudCard Class="pa-3" Style="border-radius:18px;">
                        <MudCardContent>
                            <MudText Typo="Typo.h6">@b.Vineyard.Name</MudText>
                            <MudText Typo="Typo.h6">@b.Batch.Variety</MudText>
                            <MudText Typo="Typo.caption">@b.Batch.Date.ToString("dd.MM.yyyy")</MudText>
                            <MudDivider Class="my-2"/>
                            <MudStack Row="true" Spacing="1">
                                <MudChip T="string" Icon="@Icons.Material.Filled.Scale">@($"{b.Batch.Amount:0.#} kg")</MudChip>
                                @if (!string.IsNullOrWhiteSpace(b.Batch.Maturity_Health))
                                {
                                    <MudChip T="string">@b.Batch.Maturity_Health</MudChip>
                                }
                                @if (!string.IsNullOrWhiteSpace(b.Batch.Weather))
                                {
                                    <MudChip T="string" Variant="Variant.Outlined">@b.Batch.Weather</MudChip>
                                }
                            </MudStack>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton Size="Size.Small" OnClick="@(() => Edit(b.BatchId))">Öffnen</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        }
    </MudGrid>
</MudContainer>

@code{
    List<BatchInformationRecord>? batches;
    bool loading;

    string search = "";
    DateTime? from;
    DateTime? to;

    IEnumerable<BatchInformationRecord> Filtered => (batches ?? Enumerable.Empty<BatchInformationRecord>())
        .Where(b => string.IsNullOrWhiteSpace(search)
                 || (b.Batch.Variety?.Contains(search, StringComparison.OrdinalIgnoreCase) ?? false)
                 || (b.Batch.Weather?.Contains(search, StringComparison.OrdinalIgnoreCase) ?? false)
                 || (b.Batch.Maturity_Health?.Contains(search, StringComparison.OrdinalIgnoreCase) ?? false))
        .Where(b => !from.HasValue || b.Batch.Date.Date >= from.Value.Date)
        .Where(b => !to.HasValue   || b.Batch.Date.Date <= to.Value.Date)
        .OrderByDescending(b => b.Batch.Date);

    protected override async Task OnInitializedAsync() => await LoadBatches();

    async Task LoadBatches()
    {
        loading = true;
        try { batches = await VineyardHasBatchService.GetVineyardsWithBatchesAsync(); }
        finally { loading = false; }
    }

    void ResetFilters() { search = ""; from = null; to = null; }

    async Task AddHarvestModal()
    {
        var dlg = await DialogService.ShowAsync<CreateBatchDialog>();
        var res = await dlg.Result;
        if (!res.Canceled) await LoadBatches();
    }

    async Task Edit(int id)
    {
        var parameters = new DialogParameters<UpdateBatchDialog> { { x => x.Id, id } };
        
        var dlg = await DialogService.ShowAsync<UpdateBatchDialog>("Edit Batch", parameters);
        var res = await dlg.Result;
        if (!res.Canceled) await LoadBatches();
    }
}
