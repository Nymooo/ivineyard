@using System.Globalization
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components
@using System.Net.Http.Json
@using MudBlazor
@using Model.Entities.Harvest
@using Model.Entities.Bookingobjects.Vineyard
@using WebGUI.Client.ClientServices
@using WebGUI.Client.Pages.Components.Records
@using System.IO
@using iTextSharp.text
@using iTextSharp.text.pdf
@using Microsoft.JSInterop

@inject VineyardService VineyardService
@inject TankService TankService
@inject BatchService BatchService
@inject VineyardHasBatchService VineyardBatchService
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject ISnackbar Snackbar
@inject IDialogService Dialogs

<MudDialog Class="responsive-dialog mud-dialog-width-lg">
  <DialogContent>
    <MudContainer Class="pa-4">
      <div class="d-flex align-center mb-2 w-100">
        <h2>Maßnahmendatenblatt</h2>
        <MudSpacer/>
        <MudIconButton Icon="@Icons.Material.Filled.PictureAsPdf"
                       Color="Color.Primary"
                       Size="Size.Large"
                       OnClick="ExportToPdf"
                       AriaLabel="PDF drucken"/>
        <MudIconButton Icon="@Icons.Material.Filled.DeleteForever"
                       Color="Color.Error"
                       Size="Size.Large"
                       Disabled="@(Id <= 0)"
                       OnClick="ConfirmDeleteAsync"
                       AriaLabel="Batch löschen"/>
      </div>

      <EditForm Model="@Vm" OnValidSubmit="@SaveAsync">
        <MudGrid Spacing="3">

          <!-- Linke Spalte -->
          <MudItem xs="12" md="6">
            <MudPaper Class="pa-4 mb-4">
              <MudText Typo="Typo.h5" Class="mb-2">Weingarten</MudText>

              <MudGrid Class="mb-2" Spacing="3">
                <MudItem xs="12" md="8">
                  <MudSelect T="int" @bind-Value="Vm.VineyardId" Label="Weingarten" Dense="true" Required="true">
                    @foreach (var v in Vineyards)
                    {
                      <MudSelectItem Value="@v.BookingObjectId">@v.Name</MudSelectItem>
                    }
                  </MudSelect>
                </MudItem>
                <MudItem xs="12" md="4">
                  <MudNumericField T="string" @bind-Value="Vm.Amount" Label="Menge (kg)" Dense="true" Required="true"/>
                </MudItem>

                <MudItem xs="12" md="6">
                  <MudTextField T="string" @bind-Value="Vm.Variety" Label="Sorte" Dense="true" Required="true"/>
                </MudItem>
                <MudItem xs="12" md="6">
                  <MudDatePicker T="DateTime?" @bind-Date="Vm.HarvestDate" Label="Erntedatum" Dense="true"/>
                </MudItem>
              </MudGrid>

              <!-- --- GRAPE --- -->
              <MudText Typo="Typo.h6" Class="mt-3 mb-1">Behandlungen (Trauben)</MudText>
              @foreach (var g in Vm.GrapeTreatments)
              {
                <div class="mb-2">
                  <MudGrid Class="mb-1">
                    <MudItem xs="8">
                      <MudText Typo="Typo.body1">@g.Type</MudText>
                    </MudItem>
                    <MudItem xs="4" Class="d-flex justify-end">
                      <MudIconButton Icon="@Icons.Material.Filled.AddCircleOutline" Size="Size.Small"
                                     OnClick="@(() => AddLine(g))" AriaLabel="Zeile hinzufügen"/>
                    </MudItem>
                  </MudGrid>

                  @for (int i = 0; i < g.Lines.Count; i++)
                  {
                    var idx = i;
                    <MudGrid Class="mb-2" Spacing="3">
                      <MudItem xs="12" sm="6" md="3">
                        <MudDatePicker T="DateTime?" @bind-Date="g.Lines[idx].Date" Label="Datum" Dense="true"/>
                      </MudItem>
                      <MudItem xs="12" sm="6" md="3">
                        <MudTextField @bind-Value="g.Lines[idx].Agent" Label="Mittel" Dense="true"/>
                      </MudItem>
                      <MudItem xs="12" sm="6" md="3">
                        <MudTextField T="string" @bind-Value="g.Lines[idx].Amount" Label="Menge" Dense="true"/>
                      </MudItem>
                      <MudItem xs="12" sm="6" md="3" Class="d-flex align-center">
                        <MudIconButton Icon="@Icons.Material.Filled.DeleteOutline"
                                       Disabled="@(g.Lines.Count <= 1)"
                                       OnClick="@(() => RemoveLine(g, idx))"
                                       AriaLabel="Zeile löschen"/>
                      </MudItem>
                    </MudGrid>
                  }
                </div>
              }
              <MudItem xs="12">
                <MudTextField @bind-Value="Vm.GrapeNotes" Label="weitere Behandlungsschritte" Dense="true"/>
              </MudItem>

              <!-- --- MASH --- -->
              <MudText Typo="Typo.h6" Class="mt-3 mb-1">Most / Maische</MudText>
              @foreach (var g in Vm.MashTreatments)
              {
                <div class="mb-2">
                  <MudGrid Class="mb-1">
                    <MudItem xs="8">
                      <MudText Typo="Typo.body1">@g.Type</MudText>
                    </MudItem>
                    <MudItem xs="4" Class="d-flex justify-end">
                      <MudIconButton Icon="@Icons.Material.Filled.AddCircleOutline" Size="Size.Small"
                                     OnClick="@(() => AddLine(g))" AriaLabel="Zeile hinzufügen"/>
                    </MudItem>
                  </MudGrid>

                  @for (int i = 0; i < g.Lines.Count; i++)
                  {
                    var idx = i;
                    <MudGrid Class="mb-2" Spacing="3">
                      <MudItem xs="12" sm="6" md="3">
                        <MudDatePicker T="DateTime?" @bind-Date="g.Lines[idx].Date" Label="Datum" Dense="true"/>
                      </MudItem>
                      <MudItem xs="12" sm="6" md="3">
                        <MudTextField @bind-Value="g.Lines[idx].Agent" Label="Mittel" Dense="true"/>
                      </MudItem>
                      <MudItem xs="12" sm="6" md="3">
                        <MudTextField T="string" @bind-Value="g.Lines[idx].Amount" Label="Menge" Dense="true"/>
                      </MudItem>
                      <MudItem xs="12" sm="6" md="3" Class="d-flex align-center">
                        <MudIconButton Icon="@Icons.Material.Filled.DeleteOutline"
                                       Disabled="@(g.Lines.Count <= 1)"
                                       OnClick="@(() => RemoveLine(g, idx))"
                                       AriaLabel="Zeile löschen"/>
                      </MudItem>
                    </MudGrid>
                  }
                </div>
              }
              <MudItem xs="12">
                <MudTextField @bind-Value="Vm.MashNotes" Label="weitere Behandlungsschritte" Dense="true"/>
              </MudItem>

              <!-- --- YOUNG --- -->
              <MudText Typo="Typo.h6" Class="mt-3 mb-1">Jungwein-Behandlungen</MudText>
              @foreach (var g in Vm.YoungTreatments)
              {
                <div class="mb-2">
                  <MudGrid Class="mb-1">
                    <MudItem xs="8">
                      <MudText Typo="Typo.body1">@g.Type</MudText>
                    </MudItem>
                    <MudItem xs="4" Class="d-flex justify-end">
                      <MudIconButton Icon="@Icons.Material.Filled.AddCircleOutline" Size="Size.Small"
                                     OnClick="@(() => AddLine(g))" AriaLabel="Zeile hinzufügen"/>
                    </MudItem>
                  </MudGrid>

                  @for (int i = 0; i < g.Lines.Count; i++)
                  {
                    var idx = i;
                    <MudGrid Class="mb-2" Spacing="3">
                      <MudItem xs="12" sm="6" md="3">
                        <MudDatePicker T="DateTime?" @bind-Date="g.Lines[idx].Date" Label="Datum" Dense="true"/>
                      </MudItem>
                      <MudItem xs="12" sm="6" md="3">
                        <MudTextField @bind-Value="g.Lines[idx].Agent" Label="Mittel" Dense="true"/>
                      </MudItem>
                      <MudItem xs="12" sm="6" md="3">
                        <MudTextField T="string" @bind-Value="g.Lines[idx].Amount" Label="Menge" Dense="true"/>
                      </MudItem>
                      <MudItem xs="12" sm="6" md="3" Class="d-flex align-center">
                        <MudIconButton Icon="@Icons.Material.Filled.DeleteOutline"
                                       Disabled="@(g.Lines.Count <= 1)"
                                       OnClick="@(() => RemoveLine(g, idx))"
                                       AriaLabel="Zeile löschen"/>
                      </MudItem>
                    </MudGrid>
                  }
                </div>
              }
              <MudItem xs="12">
                <MudTextField @bind-Value="Vm.YoungNotesFree" Label="weitere Behandlungsschritte" Dense="true"/>
              </MudItem>

            </MudPaper>
          </MudItem>

          <!-- Rechte Spalte -->
          <MudItem xs="12" md="6">
            <MudPaper Class="pa-4 mb-4">
              <MudText Typo="Typo.h5" Class="mb-2">Reife & Gesundheit / Tank / Wetter</MudText>

              <MudGrid Class="mb-2" Spacing="3">
                <MudItem xs="12" md="5">
                  <MudTextField @bind-Value="Vm.MaturityHealth" Label="Reife/Gesundheit" Dense="true"/>
                </MudItem>
                <MudItem xs="12" md="4">
                  <MudSelect T="int?" @bind-Value="Vm.TankId" Label="Tank" Dense="true">
                    <MudSelectItem T="int?" Value="@((int?)null)">(kein Tank)</MudSelectItem>
                    @foreach (var t in Tanks)
                    {
                      <MudSelectItem T="int?"
                                     Value="@((int?)t.TankId)">@(string.IsNullOrWhiteSpace(t.Name) ? $"Tank {t.TankId}" : t.Name)</MudSelectItem>
                    }
                  </MudSelect>
                </MudItem>
                <MudItem xs="12" md="3">
                  <MudTextField @bind-Value="Vm.Weather" Label="Wetter" Dense="true"/>
                </MudItem>
              </MudGrid>

              <MudText Typo="Typo.h6" Class="mt-3 mb-1">Daten Ausgangsmost</MudText>
              <MudGrid Class="mb-2" Spacing="3">
                <MudItem xs="12" sm="6" md="3">
                  <MudDatePicker T="DateTime?" @bind-Date="Vm.MustDate" Label="Datum" Dense="true"/>
                </MudItem>
                <MudItem xs="12" sm="6" md="3">
                  <MudTextField @bind-Value="Vm.MustAcidity" Label="Säure" Dense="true"/>
                </MudItem>
                <MudItem xs="12" sm="6" md="3">
                  <MudNumericField T="string?" @bind-Value="Vm.MustPh" Label="pH-Wert" Dense="true"/>
                </MudItem>
                <MudItem xs="12" sm="6" md="3">
                  <MudNumericField T="double?" @bind-Value="Vm.KMW_OE" Label="KMW/°Oe" Dense="true"/>
                </MudItem>
                <MudItem xs="12">
                  <MudTextField @bind-Value="Vm.Rebel" Label="Rebeln" Dense="true"/>
                </MudItem>
                <MudItem xs="12">
                  <MudTextField @bind-Value="Vm.Squeeze" Label="Quetschen" Dense="true"/>
                </MudItem>
                <MudItem xs="12">
                  <MudTextField @bind-Value="Vm.MashLife" Label="Maischestandzeit" Dense="true"/>
                </MudItem>
                <MudItem xs="12">
                  <MudTextField @bind-Value="Vm.MustNotes" Label="weitere Behandlungsschritte" Dense="true"/>
                </MudItem>
              </MudGrid>

              <MudText Typo="Typo.h6" Class="mt-3 mb-1">Daten Jungwein</MudText>
              <MudGrid Class="mb-2" Spacing="3">
                <MudItem xs="12" sm="6" md="3">
                  <MudDatePicker T="DateTime?" @bind-Date="Vm.YoungDate" Label="Datum" Dense="true"/>
                </MudItem>
                <MudItem xs="12" sm="6" md="3">
                  <MudTextField @bind-Value="Vm.YoungAcidity" Label="Säure" Dense="true"/>
                </MudItem>
                <MudItem xs="12" sm="6" md="3">
                  <MudTextField @bind-Value="Vm.YoungSugar" Label="Restzucker" Dense="true"/>
                </MudItem>
                <MudItem xs="12" sm="6" md="3">
                  <MudNumericField T="double?" @bind-Value="Vm.YoungAlcohol" Label="Alkohol" Dense="true"/>
                </MudItem>
                <MudItem xs="12" sm="6" md="3">
                  <MudNumericField T="string?" @bind-Value="Vm.YoungPh" Label="pH-Wert" Dense="true"/>
                </MudItem>
                <MudItem xs="12">
                  <MudTextField @bind-Value="Vm.YoungNotes" Label="weitere Behandlungsschritte" Dense="true"/>
                </MudItem>
              </MudGrid>

              <MudText Typo="Typo.h6" Class="mt-3 mb-1">Daten Weißwein/Rotwein (Endwerte)</MudText>
              <MudGrid Class="mb-2" Spacing="3">
                <MudItem xs="12" sm="6" md="3">
                  <MudDatePicker T="DateTime?" @bind-Date="Vm.FinalDate" Label="Datum" Dense="true"/>
                </MudItem>
                <MudItem xs="12" sm="6" md="3">
                  <MudTextField @bind-Value="Vm.FinalAcidity" Label="Säure" Dense="true"/>
                </MudItem>
                <MudItem xs="12" sm="6" md="3">
                  <MudTextField @bind-Value="Vm.FinalSugar" Label="Restzucker" Dense="true"/>
                </MudItem>
                <MudItem xs="12" sm="6" md="3">
                  <MudNumericField @bind-Value="Vm.FinalAlcohol" Label="Alkohol" Dense="true"/>
                </MudItem>
                <MudItem xs="12" sm="6" md="3">
                  <MudNumericField T="string?" @bind-Value="Vm.FinalPh" Label="pH-Wert" Dense="true"/>
                </MudItem>
                <MudItem xs="12" sm="6" md="3">
                  <MudTextField @bind-Value="Vm.FinalSulfur" Label="Schwefel" Dense="true"/>
                </MudItem>
                <MudItem xs="12">
                  <MudTextField @bind-Value="Vm.FinalNotes" Label="weitere Behandlungsschritte" Dense="true"/>
                </MudItem>
              </MudGrid>

              <MudText Typo="Typo.h6" Class="mt-3 mb-1">Umgezogen in Tank</MudText>
              @foreach (var m in Vm.Movements)
              {
                <MudGrid Class="mb-2" Spacing="3">
                  <MudItem xs="12" sm="4">
                    <MudSelect T="int?" @bind-Value="m.ToTankId" Label="Tank" Dense="true">
                      <MudSelectItem T="int?" Value="@((int?)null)">(kein Tank)</MudSelectItem>
                      @foreach (var t in Tanks)
                      {
                        <MudSelectItem T="int?"
                                       Value="@((int?)t.TankId)">@(string.IsNullOrWhiteSpace(t.Name) ? $"Tank {t.TankId}" : t.Name)</MudSelectItem>
                      }
                    </MudSelect>
                  </MudItem>
                  <MudItem xs="12" sm="4">
                    <MudNumericField T="double?" @bind-Value="m.Volume" Label="Volumen (L)" Dense="true"/>
                  </MudItem>
                  <MudItem xs="12" sm="4">
                    <MudDatePicker T="DateTime?" @bind-Date="m.Date" Label="Datum" Dense="true"/>
                  </MudItem>
                </MudGrid>
              }

              <MudDivider Class="my-2"/>
              <MudText Typo="Typo.subtitle2">Bisherige Umzüge</MudText>
              @if (MovementHistory.Any())
              {
                <MudList T="object" Dense="true">
                  @foreach (var mv in MovementHistory)
                  {
                    <MudListItem T="object">
                      @(GetTankName(mv.FromTakId) ?? $"Tank {mv.FromTakId}") → @(GetTankName(mv.ToTankId) ?? $"Tank {mv.ToTankId}")
                      · @mv.Date.ToString("dd.MM.yyyy") · @mv.Volume L
                    </MudListItem>
                  }
                </MudList>
              }
              else
              {
                <MudText Typo="Typo.caption" Class="text-medium-emphasis">Keine Umzüge vorhanden.</MudText>
              }

            </MudPaper>
          </MudItem>

        </MudGrid>

        <MudStack Row="true" Spacing="2">
          <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">Update</MudButton>
          <MudButton Variant="Variant.Outlined" OnClick="@Reset">Zurücksetzen</MudButton>
        </MudStack>
      </EditForm>
    </MudContainer>
  </DialogContent>
</MudDialog>

@code {
  // Lookups
  List<VineyardRecord> Vineyards = new();
  List<Tank> Tanks = new();

  [CascadingParameter] public MudDialogInstance? MudDialog { get; set; }
  [Parameter] public int Id { get; set; } // BatchId

  // VM
  class TreatmentLine { public string? Agent { get; set; } public string? Amount { get; set; } public DateTime? Date { get; set; } }
  class TreatmentGroup { public string Type { get; set; } = ""; public List<TreatmentLine> Lines { get; set; } = new() { new() }; }
  class MovementLine { public int? ToTankId { get; set; } public double? Volume { get; set; } public DateTime? Date { get; set; } }

  class WeinFormVm {
    public int VineyardId { get; set; }
    public string Amount { get; set; } = "";
    public DateTime? HarvestDate { get; set; }
    public string Variety { get; set; } = "";
    public string? MaturityHealth { get; set; }
    public string? Weather { get; set; }
    public int? TankId { get; set; }
    public List<TreatmentGroup> GrapeTreatments { get; set; } = new();
    public List<TreatmentGroup> MashTreatments { get; set; } = new();
    public List<TreatmentGroup> YoungTreatments { get; set; } = new();
    public string? GrapeNotes { get; set; }
    public string? MashNotes { get; set; }
    public string? YoungNotesFree { get; set; }
    public DateTime? MustDate { get; set; }
    public double? KMW_OE { get; set; }
    public string? MustAcidity { get; set; }
    public string? MustPh { get; set; }
    public string? MustNotes { get; set; }
    public string? Rebel { get; set; }
    public string? Squeeze { get; set; }
    public string? MashLife { get; set; }
    public DateTime? YoungDate { get; set; }
    public string? YoungAcidity { get; set; }
    public string? YoungSugar { get; set; }
    public double? YoungAlcohol { get; set; }
    public string? YoungPh { get; set; }
    public string? YoungNotes { get; set; }
    public DateTime? FinalDate { get; set; }
    public string? FinalAcidity { get; set; }
    public string? FinalSugar { get; set; }
    public double? FinalAlcohol { get; set; }
    public string? FinalPh { get; set; }
    public string? FinalSulfur { get; set; }
    public string? FinalNotes { get; set; }
    public List<MovementLine> Movements { get; set; } = new();
  }

  // API-DTOs (Update)
  class TreatmentLineDto { public string Type { get; set; } = ""; public string? Agent { get; set; } public string? Amount { get; set; } public DateTime? Date { get; set; } }
  class MovementLineDto { public int? ToTankId { get; set; } public double? Volume { get; set; } public DateTime? Date { get; set; } }
  class BatchUpdateDto {
    public int VineyardId { get; set; }
    public string Amount { get; set; } = "";
    public DateTime? HarvestDate { get; set; }
    public string Variety { get; set; } = string.Empty;
    public string? MaturityHealth { get; set; }
    public string? Weather { get; set; }
    public int? TankId { get; set; }
    public List<TreatmentLineDto> GrapeTreatments { get; set; } = new();
    public List<TreatmentLineDto> MashTreatments { get; set; } = new();
    public List<TreatmentLineDto> YoungTreatments { get; set; } = new();
    public string? GrapeNotes { get; set; }
    public string? MashNotes { get; set; }
    public string? YoungNotesFree { get; set; }
    public DateTime? MustDate { get; set; }
    public double? KMW_OE { get; set; }
    public string? MustAcidity { get; set; }
    public string? MustPh { get; set; }
    public string? MustNotes { get; set; }
    public string? Rebel { get; set; }
    public string? Squeeze { get; set; }
    public string? MashLife { get; set; }
    public DateTime? YoungDate { get; set; }
    public string? YoungAcidity { get; set; }
    public string? YoungSugar { get; set; }
    public double? YoungAlcohol { get; set; }
    public string? YoungPh { get; set; }
    public string? YoungNotes { get; set; }
    public DateTime? FinalDate { get; set; }
    public string? FinalAcidity { get; set; }
    public string? FinalSugar { get; set; }
    public double? FinalAlcohol { get; set; }
    public string? FinalPh { get; set; }
    public string? FinalSulfur { get; set; }
    public string? FinalNotes { get; set; }
    public List<MovementLineDto> Movements { get; set; } = new();
  }

  WeinFormVm Vm = new();
  List<TankMovementRecord> MovementHistory = new();

  bool _lookupsLoaded;
  bool _prefilled;

  protected override async Task OnInitializedAsync()
  {
    Vineyards = await VineyardService.GetVineyardsAsync();
    Tanks = await TankService.GetTanksAsync();
    _lookupsLoaded = true;
    PrefillTemplate();
  }

  protected override async Task OnParametersSetAsync()
  {
    if (Id > 0 && _lookupsLoaded && !_prefilled)
    {
      await LoadFromVineyardHasBatchAsync();
      _prefilled = true;
    }
  }

  // --- Section-Tagging für Types ---
  static string MakeType(string section, string type) => $"{section}|{type}".Trim();
  static string GetSectionTag(string? type)
  {
    if (string.IsNullOrWhiteSpace(type)) return "";
    var p = type.IndexOf('|');
    return p > -1 ? type[..p] : "";
  }
  static string StripSection(string? type)
  {
    if (string.IsNullOrWhiteSpace(type)) return "";
    var p = type.IndexOf('|');
    return p > -1 ? type[(p + 1)..].Trim() : type.Trim();
  }

  void PrefillTemplate()
  {
    Vm.Variety = "";
    Vm.GrapeTreatments = new()
    {
      new() { Type = "Trauben" },
      new() { Type = "Schwefelung" },
      new() { Type = "Extraktionsenzym" },
      new() { Type = "Pressprogramm" }
    };
    Vm.MashTreatments = new()
    {
      new() { Type = "Schwefelung" }, new() { Type = "Safentzug" }, new() { Type = "Maischestandzeit" }, new() { Type = "Ent-/Säuerung" }, new() { Type = "Mostbehandlung" },
      new() { Type = "Klärenzym" }, new() { Type = "Maischeantannin" }, new() { Type = "Aufzuckerung" }, new() { Type = "Hefe" }, new() { Type = "Hefenährstoff" },
      new() { Type = "Belüften" }, new() { Type = "Abgezogen" }
    };
    Vm.YoungTreatments = new()
    {
      new() { Type = "Ent-/Säuerung" }, new() { Type = "Biolog. Säureabbau" }, new() { Type = "Schwefelung" },
      new() { Type = "Schönung" }, new() { Type = "Vorfiltration" }, new() { Type = "Filtration" }, new() { Type = "Füllung" }
    };
    if (!Vm.Movements.Any()) Vm.Movements.Add(new());
  }

  async Task LoadFromVineyardHasBatchAsync()
  {
    var link = await VineyardBatchService.GetVineyardsWithBatchesByIdAsync(Id);
    if (link is null || link.Batch is null) return;

    // Kopf
    Vm.VineyardId = link.VineyardId;
    Vm.Amount = link.Batch.Amount;
    Vm.Variety = link.Batch.Variety;
    Vm.HarvestDate = link.Batch.Date;
    Vm.MaturityHealth = link.Batch.Maturity_Health;
    Vm.Weather = link.Batch.Weather;

    // Infos
    var infos = link.Batch.InformationsList ?? new();

    var must = infos.FirstOrDefault(i => i.StartingMust is not null);
    if (must is not null)
    {
      Vm.MustDate = must.Date;
      Vm.MustAcidity = must.Acidity;
      Vm.MustPh = must.PhValue;
      Vm.MustNotes = must.FurtherSteps;
      Vm.KMW_OE = must.StartingMust!.KMW_OE;
      Vm.Rebel = must.StartingMust!.Rebel;
      Vm.Squeeze = must.StartingMust!.Squeeze;
      Vm.MashLife = must.StartingMust!.MashLife;
    }

    var young = infos.FirstOrDefault(i => i.YoungWine is not null);
    if (young is not null)
    {
      Vm.YoungDate = young.Date;
      Vm.YoungAcidity = young.Acidity;
      Vm.YoungPh = young.PhValue;
      Vm.YoungNotes = young.FurtherSteps;
      Vm.YoungAlcohol = young.YoungWine!.Alcohol;
      Vm.YoungSugar = young.YoungWine!.ResidualSugar;
    }

    var finalW = infos.FirstOrDefault(i => i.WhiteWineRedWine is not null);
    if (finalW is not null)
    {
      Vm.FinalDate = finalW.Date;
      Vm.FinalAcidity = finalW.Acidity;
      Vm.FinalPh = finalW.PhValue;
      Vm.FinalNotes = finalW.FurtherSteps;
      Vm.FinalAlcohol = finalW.WhiteWineRedWine!.Alcohol;
      Vm.FinalSugar = finalW.WhiteWineRedWine!.ResidualSugar;
      Vm.FinalSulfur = finalW.WhiteWineRedWine!.Sulfur;
    }

    // --- Treatments & Notes ---
    var srcTreats = link.Batch.batchHasTreatmentsList ?? new();

    static string Normalize(string? s)
    {
      if (string.IsNullOrWhiteSpace(s)) return "";
      s = s.Trim();
      return s.Equals("Safentzug", StringComparison.OrdinalIgnoreCase) ? "Saftentzug" : s;
    }

    static (string Section, string Name) SplitType(string? t)
    {
      if (string.IsNullOrWhiteSpace(t)) return ("", "");
      var s = t.Trim();
      var p = s.IndexOf('|');
      return p >= 0 ? (s[..p], s[(p + 1)..]) : ("", s);
    }

    string? GetSectionNotes(string typeKey) =>
      srcTreats.FirstOrDefault(x => x.Treatment is not null &&
                                    string.Equals(x.Treatment.Type, typeKey, StringComparison.OrdinalIgnoreCase))
              ?.Treatment?.Notes;

    Vm.GrapeNotes     = GetSectionNotes("GRAPE_NOTES")      ?? Vm.GrapeNotes;
    Vm.MashNotes      = GetSectionNotes("MASH_NOTES")       ?? Vm.MashNotes;
    Vm.YoungNotesFree = GetSectionNotes("YOUNG_WINE_NOTES") ?? Vm.YoungNotesFree;

    // DICT-Key = "SECTION|NAME"
    var grouped = srcTreats
      .Where(t => t.Treatment is not null
                  && !string.IsNullOrWhiteSpace(t.Treatment!.Type)
                  && string.IsNullOrWhiteSpace(t.Treatment!.Notes))
      .Select(t =>
      {
        var (sec, name) = SplitType(t.Treatment!.Type);
        var key = $"{sec.ToUpperInvariant()}|{Normalize(name)}";
        return new { key, item = t };
      })
      .GroupBy(x => x.key, StringComparer.OrdinalIgnoreCase)
      .ToDictionary(
          g => g.Key,
          g => g.Select(x => x.item).OrderBy(x => x.Date).ToList(),
          StringComparer.OrdinalIgnoreCase);

    void FillGroups(string sectionTag, List<TreatmentGroup> groups)
    {
      var sec = sectionTag.ToUpperInvariant();
      foreach (var g in groups)
      {
        var key = $"{sec}|{Normalize(g.Type)}";
        if (grouped.TryGetValue(key, out var list) && list.Count > 0)
        {
          g.Lines = list.Select(x => new TreatmentLine
          {
            Date   = x.Date,
            Agent  = x.Agent,
            Amount = x.Amount
          }).ToList();
        }
        else
        {
          g.Lines = new() { new() };
        }
      }
    }

    FillGroups("GRAPE", Vm.GrapeTreatments);
    FillGroups("MASH",  Vm.MashTreatments);
    FillGroups("YOUNG", Vm.YoungTreatments);

    // Historie & aktueller Tank
    MovementHistory = (link.Batch.TankMovements ?? new())
      .OrderByDescending(m => m.Date)
      .ToList();

    var lastMoveTo = link.Batch.TankMovements?
      .OrderBy(m => m.Date)
      .LastOrDefault()?.ToTankId;

    var lastLinkedTank = link.Batch.TankList?
      .Select(x => (int?)x.TankId)
      .LastOrDefault();

    Vm.TankId = lastMoveTo ?? lastLinkedTank;

    await InvokeAsync(StateHasChanged);
  }

  void AddLine(TreatmentGroup g) => g.Lines.Add(new());
  void RemoveLine(TreatmentGroup g, int idx)
  {
    if (idx >= 0 && idx < g.Lines.Count && g.Lines.Count > 1)
      g.Lines.RemoveAt(idx);
  }

  async Task SaveAsync()
  {
    var dto = new BatchUpdateDto
    {
      VineyardId = Vm.VineyardId,
      Amount = Vm.Amount,
      HarvestDate = Vm.HarvestDate,
      Variety = Vm.Variety,
      MaturityHealth = Vm.MaturityHealth,
      Weather = Vm.Weather,
      TankId = Vm.TankId,

      MustDate = Vm.MustDate,
      KMW_OE = Vm.KMW_OE,
      MustAcidity = Vm.MustAcidity,
      MustPh = Vm.MustPh,
      MustNotes = Vm.MustNotes,
      Rebel = Vm.Rebel,
      Squeeze = Vm.Squeeze,
      MashLife = Vm.MashLife,

      GrapeNotes = Vm.GrapeNotes,
      MashNotes = Vm.MashNotes,
      YoungNotesFree = Vm.YoungNotesFree,

      YoungDate = Vm.YoungDate,
      YoungAcidity = Vm.YoungAcidity,
      YoungSugar = Vm.YoungSugar,
      YoungAlcohol = Vm.YoungAlcohol,
      YoungPh = Vm.YoungPh,
      YoungNotes = Vm.YoungNotes,

      FinalDate = Vm.FinalDate,
      FinalAcidity = Vm.FinalAcidity,
      FinalSugar = Vm.FinalSugar,
      FinalAlcohol = Vm.FinalAlcohol,
      FinalPh = Vm.FinalPh,
      FinalSulfur = Vm.FinalSulfur,
      FinalNotes = Vm.FinalNotes,

      GrapeTreatments = Vm.GrapeTreatments
        .SelectMany(g => g.Lines.Select(l => new TreatmentLineDto
        {
          Type = MakeType("GRAPE", g.Type), Agent = l.Agent, Amount = l.Amount, Date = l.Date
        })).ToList(),

      MashTreatments = Vm.MashTreatments
        .SelectMany(g => g.Lines.Select(l => new TreatmentLineDto
        {
          Type = MakeType("MASH", g.Type), Agent = l.Agent, Amount = l.Amount, Date = l.Date
        })).ToList(),

      YoungTreatments = Vm.YoungTreatments
        .SelectMany(g => g.Lines.Select(l => new TreatmentLineDto
        {
          Type = MakeType("YOUNG", g.Type), Agent = l.Agent, Amount = l.Amount, Date = l.Date
        })).ToList(),

      Movements = Vm.Movements
        .Select(m => new MovementLineDto { ToTankId = m.ToTankId, Volume = m.Volume, Date = m.Date })
        .ToList()
    };

    var resp = await BatchService.UpdateBatchAsync(Id, dto);
    resp.EnsureSuccessStatusCode();

    RefreshPage();
    Reset();
  }

  void Reset()
  {
    Vm = new WeinFormVm();
    MovementHistory = new();
    PrefillTemplate();
    StateHasChanged();
  }

  void RefreshPage() => Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
  string? GetTankName(int tankId) => Tanks.FirstOrDefault(t => t.TankId == tankId)?.Name;

  // PDF
  private async Task ExportToPdf()
  {
    using var ms = new MemoryStream();
    var doc = new Document(PageSize.A4, 25, 25, 30, 30);
    PdfWriter.GetInstance(doc, ms);
    doc.Open();

    var titleFont = FontFactory.GetFont("Arial", 18, Font.BOLD);
    var headerFont = FontFactory.GetFont("Arial", 14, Font.BOLD);
    var normalFont = FontFactory.GetFont("Arial", 11, Font.NORMAL);

    doc.Add(new Paragraph("Maßnahmendatenblatt", titleFont));
    doc.Add(new Paragraph(" "));

    AddSectionHeader(doc, "Weingarten / Basisdaten", headerFont);
    var baseRows = new (string, string?)[]
    {
      ("Weingarten", Vineyards.FirstOrDefault(v => v.BookingObjectId == Vm.VineyardId)?.Name),
      ("Menge (kg)", Vm.Amount),
      ("Sorte", Vm.Variety),
      ("Erntedatum", Vm.HarvestDate?.ToString("dd.MM.yyyy")),
      ("Reife/Gesundheit", Vm.MaturityHealth),
      ("Wetter", Vm.Weather),
      ("Tank", Vm.TankId is null ? "(kein Tank)" : (GetTankName(Vm.TankId.Value) ?? $"Tank {Vm.TankId}"))
    };
    AddKeyValueTable(doc, baseRows);

    AddTreatmentGroupSection(doc, "Behandlungen (Trauben)", Vm.GrapeTreatments, Vm.GrapeNotes, headerFont);
    AddTreatmentGroupSection(doc, "Most / Maische", Vm.MashTreatments, Vm.MashNotes, headerFont);
    AddTreatmentGroupSection(doc, "Jungwein-Behandlungen", Vm.YoungTreatments, Vm.YoungNotesFree, headerFont);

    AddSectionHeader(doc, "Daten Ausgangsmost", headerFont);
    var mustRows = new (string, string?)[]
    {
      ("Datum", Vm.MustDate?.ToString("dd.MM.yyyy")),
      ("Säure", Vm.MustAcidity),
      ("pH-Wert", Vm.MustPh?.ToString()),
      ("KMW/°Oe", Vm.KMW_OE?.ToString()),
      ("Rebeln", Vm.Rebel),
      ("Quetschen", Vm.Squeeze),
      ("Maischestandzeit", Vm.MashLife),
      ("weitere Behandlungsschritte", Vm.MustNotes)
    };
    AddKeyValueTable(doc, mustRows);

    AddSectionHeader(doc, "Daten Jungwein", headerFont);
    var youngRows = new (string, string?)[]
    {
      ("Datum", Vm.YoungDate?.ToString("dd.MM.yyyy")),
      ("Säure", Vm.YoungAcidity),
      ("Restzucker", Vm.YoungSugar),
      ("Alkohol", Vm.YoungAlcohol?.ToString()),
      ("pH-Wert", Vm.YoungPh?.ToString()),
      ("weitere Behandlungsschritte", Vm.YoungNotes)
    };
    AddKeyValueTable(doc, youngRows);

    AddSectionHeader(doc, "Daten Weißwein/Rotwein (Endwerte)", headerFont);
    var finalRows = new (string, string?)[]
    {
      ("Datum", Vm.FinalDate?.ToString("dd.MM.yyyy")),
      ("Säure", Vm.FinalAcidity),
      ("Restzucker", Vm.FinalSugar),
      ("Alkohol", Vm.FinalAlcohol?.ToString()),
      ("pH-Wert", Vm.FinalPh?.ToString()),
      ("Schwefel", Vm.FinalSulfur),
      ("weitere Behandlungsschritte", Vm.FinalNotes)
    };
    AddKeyValueTable(doc, finalRows);

    if (Vm.Movements.Any())
    {
      AddSectionHeader(doc, "Umgezogen in Tank (aktuell)", headerFont);
      var t = new PdfPTable(3) { WidthPercentage = 100 };
      t.SetWidths(new float[] { 40, 30, 30 });
      AddHeaderRow(t, "Tank", "Volumen (L)", "Datum");
      foreach (var m in Vm.Movements)
      {
        var tankName = GetTankName(m.ToTankId ?? -1) ?? (m.ToTankId.HasValue ? $"Tank {m.ToTankId}" : "(kein Tank)");
        t.AddCell(new Phrase(tankName, normalFont));
        t.AddCell(new Phrase(m.Volume?.ToString() ?? "-", normalFont));
        t.AddCell(new Phrase(m.Date?.ToString("dd.MM.yyyy") ?? "-", normalFont));
      }
      doc.Add(t);
      doc.Add(new Paragraph(" "));
    }

    if (MovementHistory.Any())
    {
      AddSectionHeader(doc, "Bisherige Umzüge", headerFont);
      var ht = new PdfPTable(4) { WidthPercentage = 100 };
      ht.SetWidths(new float[] { 35, 35, 15, 15 });
      AddHeaderRow(ht, "Von", "Nach", "Volumen (L)", "Datum");
      foreach (var mv in MovementHistory.OrderBy(m => m.Date))
      {
        var from = GetTankName(mv.FromTakId) ?? $"Tank {mv.FromTakId}";
        var to = GetTankName(mv.ToTankId) ?? $"Tank {mv.ToTankId}";
        ht.AddCell(new Phrase(from, normalFont));
        ht.AddCell(new Phrase(to, normalFont));
        ht.AddCell(new Phrase(mv.Volume.ToString(), normalFont));
        ht.AddCell(new Phrase(mv.Date.ToString("dd.MM.yyyy"), normalFont));
      }
      doc.Add(ht);
    }

    doc.Close();

    var bytes = ms.ToArray();
    var vineyardName = Vineyards.FirstOrDefault(v => v.BookingObjectId == Vm.VineyardId)?.Name ?? "Weingarten";
    var datePart = Vm.HarvestDate?.ToString("yyyy-MM-dd") ?? DateTime.Now.ToString("yyyy-MM-dd");
    var fileName = $"Maßnahmendatenblatt_{vineyardName}_{datePart}.pdf";

    await JS.InvokeVoidAsync("BlazorDownloadFile", fileName, "application/pdf", Convert.ToBase64String(bytes));
  }

  // ---------- HELFER ----------
  private static void AddSectionHeader(Document doc, string text, Font headerFont)
  {
    doc.Add(new Paragraph(text, headerFont));
    doc.Add(new Paragraph(" "));
  }
  private static void AddKeyValueTable(Document doc, IEnumerable<(string Label, string? Value)> rows)
  {
    var table = new PdfPTable(2) { WidthPercentage = 100 };
    table.SetWidths(new float[] { 35, 65 });
    foreach (var (label, value) in rows)
    {
      table.AddCell(new Phrase(label));
      table.AddCell(new Phrase(string.IsNullOrWhiteSpace(value) ? "-" : value));
    }
    doc.Add(table);
    doc.Add(new Paragraph(" "));
  }
  private static void AddHeaderRow(PdfPTable table, params string[] headers)
  {
    var bold = FontFactory.GetFont("Arial", 11, Font.BOLD);
    foreach (var h in headers) table.AddCell(new Phrase(h, bold));
  }

  private void AddTreatmentGroupSection(Document doc, string title, List<TreatmentGroup> groups, string? notes, Font headerFont)
  {
    AddSectionHeader(doc, title, headerFont);

    var flat = new List<(string Type, DateTime? Date, string? Agent, string? Amount)>();
    foreach (var g in groups)
      flat.AddRange(g.Lines.DefaultIfEmpty(new TreatmentLine()).Select(l => (g.Type, l.Date, l.Agent, l.Amount)));

    var t = new PdfPTable(4) { WidthPercentage = 100 };
    t.SetWidths(new float[] { 30, 25, 25, 20 });
    AddHeaderRow(t, "Typ", "Datum", "Mittel", "Menge");

    foreach (var r in flat)
    {
      t.AddCell(new Phrase(r.Type));
      t.AddCell(new Phrase(r.Date?.ToString("dd.MM.yyyy") ?? "-"));
      t.AddCell(new Phrase(string.IsNullOrWhiteSpace(r.Agent) ? "-" : r.Agent));
      t.AddCell(new Phrase(string.IsNullOrWhiteSpace(r.Amount) ? "-" : r.Amount));
    }

    doc.Add(t);

    if (!string.IsNullOrWhiteSpace(notes))
    {
      doc.Add(new Paragraph(" "));
      var nt = new PdfPTable(1) { WidthPercentage = 100 };
      AddHeaderRow(nt, "weitere Behandlungsschritte");
      nt.AddCell(new Phrase(notes!));
      doc.Add(nt);
    }

    doc.Add(new Paragraph(" "));
  }

  private async Task ConfirmDeleteAsync()
  {
    if (Id <= 0) return;

    var confirmed = await Dialogs.ShowMessageBox(
      "Batch löschen?",
      "Möchtest du diesen Batch wirklich löschen? Dieser Vorgang kann nicht rückgängig gemacht werden.",
      yesText: "Löschen",
      cancelText: "Abbrechen",
      options: new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Small });

    if (confirmed == true)
      await DeleteAsync();
  }

  private async Task DeleteAsync()
  {
    var resp = await BatchService.DeleteBatchAsync(Id);
    if (resp.IsSuccessStatusCode)
    {
      Snackbar.Add("Batch gelöscht.", Severity.Success);
      MudDialog?.Close(DialogResult.Ok(true));
      Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
    }
    else
    {
      Snackbar.Add("Löschen fehlgeschlagen.", Severity.Error);
    }
  }
}

<script>
  window.BlazorDownloadFile = (fileName, contentType, base64) => {
    const link = document.createElement('a');
    link.download = fileName;
    link.href = "data:" + contentType + ";base64," + base64;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };
</script>

<style>
  
</style>
