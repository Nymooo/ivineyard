@page "/Vineyards"
@using Microsoft.AspNetCore.Authorization
@using WebGUI.Client.ClientServices
@using WebGUI.Client.Pages.Components.Records
@using WebGUI.Client.Pages.Components.Vineyard
@using Microsoft.AspNetCore.Components.Sections
@using Model.Entities.Bookingobjects.Vineyard
@rendermode InteractiveAuto
@inject IDialogService DialogService
@inject NavigationManager Navigation1

@attribute [Authorize]

@inject IJSRuntime JsRuntime
@inject VineyardService service;
@inject BookingObjectService bookingobjectservice;

<SectionContent SectionName="headbar">
    <MudText Typo="Typo.h4">Vineyards</MudText>
</SectionContent>

<!-- Map: füllt immer die verfügbare Content-Breite; Höhe = Viewport - Appbar -->
<div id="vineyardMap" class="vineyard-map"></div>

<AuthorizeView Roles="Admin">
    <div class="bottom-menu @(_isMenuVisible ? "visible" : "") w-100">
        <MudButton Class="burger-button" OnClick="Slide" ButtonType="ButtonType.Button">
            <MudIcon Icon="@Icons.Material.Filled.Menu" />
        </MudButton>
        <div class="w-100 menu-content d-flex flex-row">
            @foreach (var i in vineyards)
            {
            <MudCard Style="height: 100%; min-width: 30%; margin: 0 10px 5px 5px"
                     Elevation="0"
                     Class="shadow-lg rounded-2"
                     @onclick="() => NavigateToSpecificVineyard(i.BookingObjectId)">
                <MudCardHeader class="d-flex flex-column justify-content-center" Style="background-color: #D7F6CD">
                    <MudText Typo="Typo.h4">@i.Name</MudText>
                </MudCardHeader>
                <MudCardContent Class="d-flex flex-column" Style="overflow-y: auto;">
                    <MudText Typo="Typo.h5"><b>Größe:</b> @i.Area ha</MudText>
                    <MudText><b>Stati:</b></MudText>

                    @foreach (var s in i.StatusList
                    .OrderBy(s => s.EndDate.HasValue ? 1 : 0)
                    .ThenBy(s => s.EndDate)
                    .ThenBy(s => s.StartDate)
                    .Take(3))
                    {
                    <MudText Color="Color.Primary">@s.VineyardStatusType.Type</MudText>
                    }
                </MudCardContent>
            </MudCard>
            }
        </div>
    </div>
</AuthorizeView>

@code {
private List<VineyardStatusType> _statusType = new();
private static Dictionary<string, object> CurrentVineyardData { get; set; }
private bool _isMenuVisible = false;
private IJSObjectReference? _module;
protected List<VineyardRecord> vineyards = new();

[JSInvokable]
public async Task<string> ShowDialog()
{
var result = await DialogService.ShowAsync<VineyardCreateDialog>();
return result?.Result != null ? "HALLOOOOOOOOOOOOO" : "nix funktioneirt ";
}

protected override async Task OnAfterRenderAsync(bool firstRender)
{
if (firstRender && JsRuntime is not null)
{
var dotNetObjectReference = DotNetObjectReference.Create(this);
_module = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./map.js");
if (_module is not null)
{
await _module.InvokeVoidAsync("MapFunctionVineyards", dotNetObjectReference);
vineyards = await service.GetVineyardsAsync();
if (vineyards is not null)
await _module.InvokeVoidAsync("LoadVineyardsFunction", vineyards);
}
}
}

private void Slide() => _isMenuVisible = !_isMenuVisible;

[JSInvokable]
public async void ReceiveVineyardData(string area, string coordinates, double[] midcoordinate)
{
string midcoordinates = midcoordinate[0].ToString("F6").Replace(",", ".") + "," +
midcoordinate[1].ToString("F6").Replace(",", ".");
var dialog = await DialogService.ShowAsync<VineyardCreateDialog>("Add Vineyard");
var result = await dialog.Result;
string vineyardName = (string)result.Data;
var bookingObject = await bookingobjectservice.ManageBookingObject();

if (float.TryParse(area, System.Globalization.NumberStyles.Float,
System.Globalization.CultureInfo.InvariantCulture, out float parsedArea))
{
CurrentVineyardData = new Dictionary<string, object>
{
{ "Area", parsedArea },
{ "Coordinates", coordinates },
{ "MidCoordinate", midcoordinates},
{ "Name", vineyardName},
{ "Id", bookingObject.Id }
};

bool ok = await service.CreateVineyard(CurrentVineyardData);
if (ok) ReloadPage(Navigation1);
}
else
{
Console.WriteLine("Fehler: 'area' konnte nicht in float konvertiert werden.");
}
}

public static void ReloadPage(NavigationManager manager) => manager.NavigateTo(manager.Uri, true);

private void NavigateToSpecificVineyard(int id) => Navigation1.NavigateTo($"/specificVineyard/{id}");
}

<AuthorizeView Roles="Employee">
    <style>
        .leaflet-draw { display: none; }
        .leaflet-control { display: none; }
    </style>
</AuthorizeView>

<style>
    /* Map füllt immer den Content-Bereich – keine starre Breite mehr */
    .vineyard-map {
        width: 100%;
        /* Fallback-Höhe, JS setzt die reale Appbar-Höhe noch genauer */
        height: calc(100vh - 64px);
    }

    /* Bottom-Menu */
    .bottom-menu {
        position: fixed;
        z-index: 1002;
        bottom: -20vh;
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        transition: bottom 0.5s ease-in-out;
        background-color: transparent;
    }
    .bottom-menu.visible { bottom: 0; }
    .burger-button {
        position: relative;
        left: 15px;
        margin-bottom: 15px;
        z-index: 1001;
        background-color: #ffffff;
        margin: 5px 0 15px 5px;
    }
    .menu-content {
        background-color: transparent;
        height: 20vh;
        padding: 15px;
        overflow: auto;
    }

    
</style>
